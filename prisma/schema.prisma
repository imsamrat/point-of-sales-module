// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("user")
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sales     Sale[]
  expenses  Expense[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products    Product[]

  @@map("categories")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  description   String?
  purchasePrice Float
  sellingPrice  Float
  initialStock  Int      @default(0)
  stock         Int      @default(0)
  categoryId    String?
  barcode       String?  @unique
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  category      Category? @relation(fields: [categoryId], references: [id])
  saleItems     SaleItem[]

  @@map("products")
}

model Sale {
  id        String     @id @default(cuid())
  total     Float
  userId    String
  customerId String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id])
  customer  Customer?  @relation(fields: [customerId], references: [id])
  items     SaleItem[]

  @@map("sales")
}

model SaleItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float
  saleId    String
  productId String

  // Relations
  sale      Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@map("sale_items")
}

model Customer {
  id        String   @id @default(cuid())
  name      String?
  phone     String
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sales     Sale[]

  @@map("customers")
}

model Expense {
  id          String   @id @default(cuid())
  amount      Float
  category    String
  description String?
  date        DateTime @default(now())
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id])

  @@map("expenses")
}

model Employee {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  position  String
  salary    Float?
  hireDate  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("employees")
}